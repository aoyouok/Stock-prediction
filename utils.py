import numpy as np

STOCK_LIST = [
    ('000001.SZ', '平安银行'),
    ('000002.SZ', '万 科Ａ'),
    ('000004.SZ', '国华网安'),
    ('000005.SZ', '世纪星源'),
    ('000006.SZ', '深振业Ａ'),
    ('000007.SZ', '全 新 好'),
    ('000008.SZ', '神州高铁'),
    ('000009.SZ', '中国宝安'),
    ('000010.SZ', '美丽生态'),
    ('000011.SZ', '深物业A'),
    ('600000.SH', '浦发银行'),
    ('600004.SH', '白云机场'),
    ('600006.SH', '东风汽车'),
    ('600007.SH', '中国国贸'),
    ('600008.SH', '首创股份'),
    ('600009.SH', '上海机场'),
    ('600010.SH', '包钢股份'),
    ('600011.SH', '华能国际'),
    ('600012.SH', '皖通高速'),
    ('600015.SH', '华夏银行'),
    ('600016.SH', '民生银行'),
    ('600017.SH', '日照港'),
    ('600018.SH', '上港集团'),
    ('600019.SH', '宝钢股份'),
    ('600020.SH', '中原高速'),
    ('600021.SH', '上海电力'),
    ('600022.SH', '山东钢铁'),
    ('600026.SH', '中远海能'),
    ('600027.SH', '华电国际'),
    ('600028.SH', '中国石化'),
    ('600029.SH', '南方航空'),
    ('600030.SH', '中信证券'),
    ('600031.SH', '三一重工'),
    ('600048.SH', '保利地产'),
    ('600050.SH', '中国联通'),
    ('600100.SH', '同方股份'),
    ('600104.SH', '上汽集团'),
    ('600111.SH', '北方稀土'),
    ('600115.SH', '东方航空'),
    ('600118.SH', '中国卫星'),
    ('600150.SH', '中国船舶'),
    ('600153.SH', '建发股份'),
    ('600170.SH', '上海建工'),
    ('600183.SH', '生益科技'),
    ('600196.SH', '复星医药'),
    ('600208.SH', '新湖中宝'),
    ('600233.SH', '圆通速递'),
    ('600271.SH', '航天信息'),
    ('600276.SH', '恒瑞医药'),
    ('600297.SH', '广汇汽车'),
    ('600309.SH', '万华化学'),
    ('600332.SH', '白云山'),
    ('600340.SH', '华夏幸福'),
    ('600346.SH', '恒力石化'),
    ('600362.SH', '江西铜业'),
    ('600369.SH', '西南证券'),
    ('600372.SH', '中航电子'),
    ('600383.SH', '金地集团'),
    ('600390.SH', '五矿资本'),
    ('600398.SH', '海澜之家'),
    ('600406.SH', '国电南瑞'),
    ('600436.SH', '片仔癀'),
    ('600438.SH', '通威股份'),
    ('600482.SH', '中国动力'),
    ('600487.SH', '亨通光电'),
    ('600489.SH', '中金黄金'),
    ('600498.SH', '烽火通信'),
    ('600516.SH', '方大炭素'),
    ('600519.SH', '贵州茅台')
]

# 生成详细建议
def generate_detailed_recommendation(prediction, current_price):
    """根据预测结果生成详细的投资建议"""
    predicted_price_start = prediction[0]
    predicted_price_end = prediction[-1]
    price_change = predicted_price_end - predicted_price_start
    change_rate = (price_change / predicted_price_start) * 100

    # 增加价格的预测区间
    predicted_price_range = {
        'min': np.min(prediction),
        'max': np.max(prediction),
        'mean': np.mean(prediction)
    }

    # 增加价格波动的预测
    predicted_price_volatility = np.std(prediction)

    # 生成详细建议
    recommendation = (
        f"当前价格为 {current_price:.2f} 元。\n\n"
        f"基于模型预测，未来30天的股票价格预计将在以下范围内波动：\n"
        f"  - 预测最低价: {predicted_price_range['min']:.2f} 元\n"
        f"  - 预测最高价: {predicted_price_range['max']:.2f} 元\n"
        f"  - 预测平均价: {predicted_price_range['mean']:.2f} 元\n\n"
        f"根据预测结果：\n"
        f"  - 价格变化: {price_change:.2f} 元\n"
        f"  - 价格变化幅度: {change_rate:.2f}%\n"
        f"  - 价格波动: {predicted_price_volatility:.2f} 元\n\n"
    )

    if change_rate > 5:
        recommendation += (
            "建议买入：模型预测未来30天股票价格有明显的上涨趋势，预计上涨幅度较大，"
            "可能是因为公司有利好消息或市场对其前景看好。考虑在当前价格附近买入，以期获得投资回报。"
            "请结合其他市场信息，评估风险并做出决策。"
        )
    elif change_rate < -5:
        recommendation += (
            "建议卖出：模型预测未来30天股票价格有明显的下跌趋势，"
            "可能是因为公司面临困境或市场对其前景不看好。考虑在当前价格附近卖出，以降低损失。"
            "请结合其他市场信息，评估风险并做出决策。"
        )
    else:
        recommendation += (
            "建议持有：模型预测未来30天股票价格变动幅度较小，"
            "市场对该股票的前景预期稳定。考虑继续持有，关注市场动态，适时调整投资策略。"
        )

    return recommendation
